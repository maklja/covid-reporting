{
	"name": "df_transform_hospital_admissions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_ecdc_hospital_admissions_raw_csv",
						"type": "DatasetReference"
					},
					"name": "HospitalAdmissionsSource"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "CountrySource"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_date_lookup",
						"type": "DatasetReference"
					},
					"name": "DimDateSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_hospital_weekly_admissions",
						"type": "DatasetReference"
					},
					"name": "HospitalAdmissionsWeeklySink",
					"rejectedDataLinkedService": {
						"referenceName": "ls_adls_covidreportingdl",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "ds_processed_hospital_daily_admissions",
						"type": "DatasetReference"
					},
					"name": "HospitalAdmissionsDailySink",
					"rejectedDataLinkedService": {
						"referenceName": "ls_adls_covidreportingdl",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "SelectRequiredFieldsOnly"
				},
				{
					"name": "LookupCountry"
				},
				{
					"name": "CleanCountryFields"
				},
				{
					"name": "SplitDailyAndWeekly"
				},
				{
					"name": "ECDCYearWeek"
				},
				{
					"name": "AggregateDimDate"
				},
				{
					"name": "JoiDimDate"
				},
				{
					"name": "PivotWeeklyAdmissions"
				},
				{
					"name": "MapWeeklyCountFields"
				},
				{
					"name": "PivotDailyAdmissions"
				},
				{
					"name": "MapDailyCountFields"
				},
				{
					"name": "SortWeekly"
				},
				{
					"name": "SortDaily"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> HospitalAdmissionsSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountrySource",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimDateSource",
				"HospitalAdmissionsSource select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectRequiredFieldsOnly",
				"SelectRequiredFieldsOnly, CountrySource lookup(SelectRequiredFieldsOnly@country == CountrySource@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupCountry",
				"LookupCountry select(mapColumn(",
				"          country = SelectRequiredFieldsOnly@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          indicator,",
				"          reported_date,",
				"          reported_year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CleanCountryFields",
				"CleanCountryFields split(equalsIgnoreCase(indicator, \"Weekly new hospital admissions per 100k\") || equalsIgnoreCase(indicator, \"Weekly new ICU admissions per 100k\"),",
				"     disjoint: false) ~> SplitDailyAndWeekly@(Weekly, Daily)",
				"DimDateSource derive(ecdc_year_week = year + '-W' + lpad(week_of_year, 2, '0')) ~> ECDCYearWeek",
				"ECDCYearWeek aggregate(groupBy(ecdc_year_week),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> AggregateDimDate",
				"SplitDailyAndWeekly@Weekly, AggregateDimDate join(reported_year_week == ecdc_year_week,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoiDimDate",
				"JoiDimDate pivot(groupBy(ecdc_year_week,",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          reported_year_week,",
				"          source,",
				"          week_start_date,",
				"          week_end_date),",
				"     pivotBy(indicator, ['Weekly new ICU admissions per 100k', 'Weekly new hospital admissions per 100k']),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> PivotWeeklyAdmissions",
				"PivotWeeklyAdmissions select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          reported_week_start_date = week_start_date,",
				"          reported_week_end_date = week_end_date,",
				"          new_icu_occupancy_count = {Weekly new ICU admissions per 100k_count},",
				"          new_hospital_occupancy_count = {Weekly new hospital admissions per 100k_count},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> MapWeeklyCountFields",
				"SplitDailyAndWeekly@Daily pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          reported_year_week,",
				"          source),",
				"     pivotBy(indicator, ['Daily ICU occupancy', 'Daily hospital occupancy']),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> PivotDailyAdmissions",
				"PivotDailyAdmissions select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          icu_occupancy_count = {Daily ICU occupancy_count},",
				"          hospital_occupancy_count = {Daily hospital occupancy_count},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> MapDailyCountFields",
				"MapWeeklyCountFields sort(desc(reported_year_week, true),",
				"     asc(country, true),",
				"     partitionBy('hash', 1)) ~> SortWeekly",
				"MapDailyCountFields sort(desc(reported_date, true),",
				"     asc(country, true),",
				"     partitionBy('hash', 1)) ~> SortDaily",
				"SortWeekly sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['processed_hospital_weekly_admissions.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> HospitalAdmissionsWeeklySink",
				"SortDaily sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['processed_hospital_daily_admissions.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> HospitalAdmissionsDailySink"
			]
		}
	}
}